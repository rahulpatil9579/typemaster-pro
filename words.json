class TypeMaster {
    constructor() {
        this.words = [];
        this.sentences = [];
        this.currentText = '';
        this.currentInput = '';
        this.isTesting = false;
        this.startTime = null;
        this.timer = null;
        this.timeLimit = 60;
        this.errors = 0;
        this.totalKeystrokes = 0;
        this.correctKeystrokes = 0;
        this.wpmHistory = [];
        
        this.initializeElements();
        this.loadWords();
        this.setupEventListeners();
        this.initializeChart();
    }

    initializeElements() {
        this.textDisplay = document.getElementById('textDisplay');
        this.typingInput = document.getElementById('typingInput');
        this.startBtn = document.getElementById('startBtn');
        this.resetBtn = document.getElementById('resetBtn');
        this.themeBtn = document.getElementById('themeBtn');
        this.newTestBtn = document.getElementById('newTestBtn');
        this.results = document.getElementById('results');
        
        // Stats elements
        this.wpmElement = document.getElementById('wpm');
        this.accuracyElement = document.getElementById('accuracy');
        this.timerElement = document.getElementById('timer');
        this.errorsElement = document.getElementById('errors');
        this.finalWpm = document.getElementById('finalWpm');
        this.finalAccuracy = document.getElementById('finalAccuracy');
        this.finalErrors = document.getElementById('finalErrors');
        
        // Chart
        this.progressChart = null;
    }

    async loadWords() {
        try {
            // Use the embedded word data
            const wordData = {
                "wordLists": [
                    {
                        "category": "programming",
                        "words": [
                            "function variable constant array object class method algorithm syntax debug compile",
                            "javascript python java html css react angular vue node express database server",
                            "framework library interface module package import export callback promise async",
                            "developer programmer coding scripting backend frontend fullstack devops agile",
                            "repository version control git commit push pull branch merge conflict resolution"
                        ]
                    },
                    {
                        "category": "tech",
                        "words": [
                            "computer laptop smartphone tablet processor memory storage network internet",
                            "software hardware firmware operating system application platform cloud server",
                            "encryption security firewall malware virus phishing authentication authorization",
                            "artificial intelligence machine learning neural network data science analytics",
                            "blockchain cryptocurrency bitcoin ethereum smart contract decentralized digital"
                        ]
                    },
                    {
                        "category": "business",
                        "words": [
                            "company organization team project management leadership strategy planning execution",
                            "marketing sales revenue profit customer client service support satisfaction loyalty",
                            "innovation creativity disruption transformation digital automation efficiency productivity",
                            "startup enterprise corporation partnership collaboration communication presentation",
                            "investment funding valuation growth scaling milestone achievement success failure"
                        ]
                    },
                    {
                        "category": "common",
                        "words": [
                            "the quick brown fox jumps over the lazy dog with incredible speed and precision",
                            "pack my box with five dozen liquor jugs and enjoy the beautiful sunset tonight",
                            "how vexingly quick daft zebras jump while making crazy movements around here",
                            "waltz bad nymph for quick jigs vex and amaze everyone watching the performance",
                            "the five boxing wizards jump quickly while practicing their magical spells daily"
                        ]
                    },
                    {
                        "category": "sentences",
                        "sentences": [
                            "The quick brown fox jumps over the lazy dog near the river bank every morning.",
                            "Programming computers is a fun and challenging career that requires logical thinking.",
                            "Typing speed and accuracy are essential skills in today's digital workplace environment.",
                            "Practice makes perfect when you are learning to type quickly without looking down.",
                            "The internet has revolutionized how we communicate and access information worldwide.",
                            "Artificial intelligence is transforming various industries and creating new opportunities.",
                            "Web development involves creating responsive websites that work on all devices.",
                            "Regular exercise and proper nutrition are important for maintaining good health.",
                            "Learning new skills keeps your mind sharp and opens up new career possibilities.",
                            "Time management is crucial for balancing work, study, and personal life effectively."
                        ]
                    }
                ]
            };

            // Extract all words and sentences
            this.words = [];
            this.sentences = [];
            
            wordData.wordLists.forEach(list => {
                if (list.words) {
                    this.words.push(...list.words);
                }
                if (list.sentences) {
                    this.sentences.push(...list.sentences);
                }
            });

            this.generateNewText();
        } catch (error) {
            console.error('Error loading words:', error);
            // Fallback words if there's an error
            this.words = [
                "the quick brown fox jumps over the lazy dog",
                "programming is fun and challenging",
                "practice makes perfect when typing",
                "web development requires html css javascript",
                "artificial intelligence machine learning"
            ];
            this.sentences = [
                "The quick brown fox jumps over the lazy dog.",
                "Programming is an essential skill in today's world.",
                "Typing speed improves with regular practice sessions."
            ];
            this.generateNewText();
        }
    }

    generateNewText() {
        // Randomly choose between words or sentences
        const useSentences = Math.random() > 0.5;
        const sourceArray = useSentences ? this.sentences : this.words;
        
        if (sourceArray.length > 0) {
            const randomIndex = Math.floor(Math.random() * sourceArray.length);
            this.currentText = sourceArray[randomIndex];
        } else {
            // Fallback text
            this.currentText = "Welcome to TypeMaster Pro! Start typing to begin your speed test.";
        }
        
        this.renderText();
    }

    renderText() {
        this.textDisplay.innerHTML = '';
        this.currentText.split('').forEach((char, index) => {
            const span = document.createElement('span');
            span.textContent = char;
            span.className = 'char';
            if (index === 0) {
                span.classList.add('current');
            }
            this.textDisplay.appendChild(span);
        });
    }

    setupEventListeners() {
        this.startBtn.addEventListener('click', () => this.startTest());
        this.resetBtn.addEventListener('click', () => this.resetTest());
        this.newTestBtn.addEventListener('click', () => this.newTest());
        this.themeBtn.addEventListener('click', () => this.toggleTheme());
        
        this.typingInput.addEventListener('input', (e) => this.handleInput(e));
        this.typingInput.addEventListener('keydown', (e) => {
            if (e.key === 'Backspace') {
                e.preventDefault(); // Prevent default backspace behavior
            }
        });

        // Time selection buttons
        document.querySelectorAll('.time-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.time-btn').forEach(b => b.classList.remove('active'));
                e.target.classList.add('active');
                this.timeLimit = parseInt(e.target.dataset.time);
                this.timerElement.textContent = this.timeLimit;
            });
        });
    }

    startTest() {
        this.isTesting = true;
        this.startTime = new Date();
        this.errors = 0;
        this.totalKeystrokes = 0;
        this.correctKeystrokes = 0;
        this.currentInput = '';
        
        this.typingInput.value = '';
        this.typingInput.disabled = false;
        this.typingInput.focus();
        
        this.startBtn.disabled = true;
        this.resetBtn.disabled = false;
        
        this.results.classList.add('hidden');
        
        this.startTimer();
        this.updateStats();
    }

    startTimer() {
        let timeLeft = this.timeLimit;
        this.timerElement.textContent = timeLeft;
        
        this.timer = setInterval(() => {
            timeLeft--;
            this.timerElement.textContent = timeLeft;
            
            if (timeLeft <= 0) {
                this.endTest();
            }
            
            this.updateStats();
        }, 1000);
    }

    handleInput(e) {
        if (!this.isTesting) return;
        
        this.currentInput = e.target.value;
        this.totalKeystrokes++;
        
        this.updateTextDisplay();
        this.updateStats();
    }

    updateTextDisplay() {
        const chars = this.textDisplay.querySelectorAll('.char');
        let newErrors = 0;
        
        chars.forEach((charSpan, index) => {
            charSpan.classList.remove('correct', 'incorrect', 'current');
            
            if (index < this.currentInput.length) {
                if (this.currentInput[index] === this.currentText[index]) {
                    charSpan.classList.add('correct');
                    this.correctKeystrokes++;
                } else {
                    charSpan.classList.add('incorrect');
                    newErrors++;
                }
            }
            
            if (index === this.currentInput.length) {
                charSpan.classList.add('current');
            }
        });
        
        this.errors = newErrors;
    }

    updateStats() {
        const currentTime = new Date();
        const timeElapsed = (currentTime - this.startTime) / 1000 / 60; // in minutes
        
        if (timeElapsed > 0) {
            const wpm = Math.round((this.correctKeystrokes / 5) / timeElapsed);
            this.wpmElement.textContent = wpm;
        }
        
        const accuracy = this.totalKeystrokes > 0 
            ? Math.round(((this.totalKeystrokes - this.errors) / this.totalKeystrokes) * 100)
            : 100;
        
        this.accuracyElement.textContent = accuracy + '%';
        this.errorsElement.textContent = this.errors;
    }

    endTest() {
        this.isTesting = false;
        clearInterval(this.timer);
        this.typingInput.disabled = true;
        
        const finalWpm = parseInt(this.wpmElement.textContent);
        const finalAccuracy = parseInt(this.accuracyElement.textContent);
        
        this.wpmHistory.push({
            wpm: finalWpm,
            accuracy: finalAccuracy,
            errors: this.errors,
            timestamp: new Date().toLocaleDateString()
        });
        
        this.showResults(finalWpm, finalAccuracy, this.errors);
        this.updateChart();
    }

    showResults(wpm, accuracy, errors) {
        this.finalWpm.textContent = wpm;
        this.finalAccuracy.textContent = accuracy + '%';
        this.finalErrors.textContent = errors;
        this.results.classList.remove('hidden');
    }

    resetTest() {
        this.isTesting = false;
        clearInterval(this.timer);
        
        this.typingInput.value = '';
        this.typingInput.disabled = true;
        
        this.startBtn.disabled = false;
        this.resetBtn.disabled = true;
        
        this.wpmElement.textContent = '0';
        this.accuracyElement.textContent = '100%';
        this.errorsElement.textContent = '0';
        this.timerElement.textContent = this.timeLimit;
        
        this.generateNewText();
        this.results.classList.add('hidden');
    }

    newTest() {
        this.resetTest();
        this.startTest();
    }

    toggleTheme() {
        const currentTheme = document.documentElement.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.documentElement.setAttribute('data-theme', newTheme);
        this.themeBtn.textContent = newTheme === 'dark' ? '☀️ Light' : '🌙 Dark';
        
        // Update chart colors when theme changes
        if (this.progressChart) {
            this.updateChartColors();
        }
    }

    initializeChart() {
        const ctx = document.getElementById('progressChart').getContext('2d');
        
        this.progressChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'WPM Progress',
                    data: [],
                    borderColor: getComputedStyle(document.documentElement).getPropertyValue('--primary-color'),
                    backgroundColor: getComputedStyle(document.documentElement).getPropertyValue('--primary-color') + '20',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--text-primary')
                        }
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        grid: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--border-color')
                        },
                        ticks: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary')
                        }
                    },
                    x: {
                        grid: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--border-color')
                        },
                        ticks: {
                            color: getComputedStyle(document.documentElement).getPropertyValue('--text-secondary')
                        }
                    }
                }
            }
        });
    }

    updateChart() {
        if (!this.progressChart) return;
        
        const labels = this.wpmHistory.map((_, index) => `Test ${index + 1}`);
        const data = this.wpmHistory.map(test => test.wpm);
        
        this.progressChart.data.labels = labels;
        this.progressChart.data.datasets[0].data = data;
        this.progressChart.update();
    }

    updateChartColors() {
        if (!this.progressChart) return;
        
        const primaryColor = getComputedStyle(document.documentElement).getPropertyValue('--primary-color');
        const textColor = getComputedStyle(document.documentElement).getPropertyValue('--text-primary');
        const secondaryColor = getComputedStyle(document.documentElement).getPropertyValue('--text-secondary');
        const borderColor = getComputedStyle(document.documentElement).getPropertyValue('--border-color');
        
        this.progressChart.data.datasets[0].borderColor = primaryColor;
        this.progressChart.data.datasets[0].backgroundColor = primaryColor + '20';
        
        this.progressChart.options.plugins.legend.labels.color = textColor;
        this.progressChart.options.scales.y.ticks.color = secondaryColor;
        this.progressChart.options.scales.y.grid.color = borderColor;
        this.progressChart.options.scales.x.ticks.color = secondaryColor;
        this.progressChart.options.scales.x.grid.color = borderColor;
        
        this.progressChart.update();
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new TypeMaster();
});